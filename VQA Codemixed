{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":3064985,"sourceType":"datasetVersion","datasetId":1876338},{"sourceId":8521183,"sourceType":"datasetVersion","datasetId":5087888},{"sourceId":8921279,"sourceType":"datasetVersion","datasetId":5365783}],"dockerImageVersionId":30627,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/usmanmusa/babate-vqa-small-dataset?scriptVersionId=189198647\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Dataset Description\n\nThe DAQUAR dataset, a significant Visual Question Answering (VQA) dataset, was the first of its kind. It comprises 6794 training and 5674 test question-answer pairs, derived from images in the NYU-Depth V2 Dataset, resulting in an average of 9 pairs per image. The dataset is a refined version of the Full DAQUAR Dataset, featuring normalized questions for easier processing by tokenizers. Image IDs, questions, and answers are organized in a tabular (CSV) format, facilitating seamless use for training VQA models.\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"%%capture\n#!pip install -U datasets\n!pip install transformers==4.18.0 nltk==3.2.4 numpy==1.21.6 datasets==2.1.0 pandas==1.3.5\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:41:06.880299Z","iopub.execute_input":"2024-07-18T16:41:06.881117Z","iopub.status.idle":"2024-07-18T16:41:42.516857Z","shell.execute_reply.started":"2024-07-18T16:41:06.881086Z","shell.execute_reply":"2024-07-18T16:41:42.515659Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import os\nfrom copy import deepcopy\nfrom dataclasses import dataclass\nfrom typing import Dict, List, Optional, Tuple\nfrom datasets import load_dataset, set_caching_enabled\nimport numpy as np\nfrom PIL import Image\nimport torch\nimport torch.nn as nn\nfrom transformers import (\n    # Preprocessing / Common\n    AutoTokenizer, AutoFeatureExtractor,\n    # Text & Image Models (Now, image transformers like ViTModel, DeiTModel, BEiT can also be loaded using AutoModel)\n    AutoModel, AutoConfig,           \n    # Training / Evaluation\n    TrainingArguments, Trainer,\n    # Misc\n    logging\n)\n\n\nimport warnings \n\nwarnings.filterwarnings('ignore')\n\nimport nltk\nnltk.download('wordnet')\nimport nltk\nimport subprocess\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Download and unzip wordnet\ntry:\n    nltk.data.find('wordnet.zip')\nexcept:\n    nltk.download('wordnet', download_dir='/kaggle/working/')\n    command = \"unzip /kaggle/working/corpora/wordnet.zip -d /kaggle/working/corpora\"\n    subprocess.run(command.split())\n    nltk.data.path.append('/kaggle/working/')\n\nfrom nltk.corpus import wordnet\n\nfrom sklearn.metrics import accuracy_score, f1_score","metadata":{"execution":{"iopub.status.busy":"2024-07-18T17:10:35.365151Z","iopub.execute_input":"2024-07-18T17:10:35.365541Z","iopub.status.idle":"2024-07-18T17:10:35.401904Z","shell.execute_reply.started":"2024-07-18T17:10:35.365512Z","shell.execute_reply":"2024-07-18T17:10:35.400985Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package wordnet to /kaggle/working/...\n[nltk_data]   Package wordnet is already up-to-date!\nArchive:  /kaggle/working/corpora/wordnet.zip\n","output_type":"stream"},{"name":"stderr","text":"replace /kaggle/working/corpora/wordnet/lexnames? [y]es, [n]o, [A]ll, [N]one, [r]ename:  NULL\n(EOF or read error, treating as \"[N]one\" ...)\n","output_type":"stream"}]},{"cell_type":"code","source":"from transformers import ViTForImageClassification\nimport torch\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nmodel = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\nmodel.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:00.173607Z","iopub.execute_input":"2024-07-18T16:42:00.174741Z","iopub.status.idle":"2024-07-18T16:42:19.663589Z","shell.execute_reply.started":"2024-07-18T16:42:00.174693Z","shell.execute_reply":"2024-07-18T16:42:19.662609Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading:   0%|          | 0.00/68.0k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f94a8c7caf934165b3c5a41d11a86318"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading:   0%|          | 0.00/330M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fffd30733bc641d1932912dc0ac9e75e"}},"metadata":{}},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"ViTForImageClassification(\n  (vit): ViTModel(\n    (embeddings): ViTEmbeddings(\n      (patch_embeddings): PatchEmbeddings(\n        (projection): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))\n      )\n      (dropout): Dropout(p=0.0, inplace=False)\n    )\n    (encoder): ViTEncoder(\n      (layer): ModuleList(\n        (0-11): 12 x ViTLayer(\n          (attention): ViTAttention(\n            (attention): ViTSelfAttention(\n              (query): Linear(in_features=768, out_features=768, bias=True)\n              (key): Linear(in_features=768, out_features=768, bias=True)\n              (value): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.0, inplace=False)\n            )\n            (output): ViTSelfOutput(\n              (dense): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.0, inplace=False)\n            )\n          )\n          (intermediate): ViTIntermediate(\n            (dense): Linear(in_features=768, out_features=3072, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): ViTOutput(\n            (dense): Linear(in_features=3072, out_features=768, bias=True)\n            (dropout): Dropout(p=0.0, inplace=False)\n          )\n          (layernorm_before): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n          (layernorm_after): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n        )\n      )\n    )\n    (layernorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n  )\n  (classifier): Linear(in_features=768, out_features=1000, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"# cache for Hugging Face Transformers and Datasets.\nos.environ['HF_HOME'] = os.path.join(\".\", \"cache\")\n\nset_caching_enabled(True)\nlogging.set_verbosity_error()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:19.665655Z","iopub.execute_input":"2024-07-18T16:42:19.665956Z","iopub.status.idle":"2024-07-18T16:42:19.670739Z","shell.execute_reply.started":"2024-07-18T16:42:19.66593Z","shell.execute_reply":"2024-07-18T16:42:19.669856Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"#check for GPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(device)\n\n#Additional Info when using cuda\nif device.type == 'cuda':\n    print(torch.cuda.get_device_name(0))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:19.672053Z","iopub.execute_input":"2024-07-18T16:42:19.672335Z","iopub.status.idle":"2024-07-18T16:42:19.689959Z","shell.execute_reply.started":"2024-07-18T16:42:19.672309Z","shell.execute_reply":"2024-07-18T16:42:19.689085Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"cuda\nTesla P100-PCIE-16GB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load the dataset","metadata":{}},{"cell_type":"code","source":"# load dataset from CSV files for training and testing\ndataset = load_dataset(\n    \"csv\", \n    data_files={\n        \"train\": \"/kaggle/input/babatecodemixedtext/English_Hausa_&_Codemixed_Dataset/Hausa_English_Codemixed_Train_Dataset3.csv\",\n        \"test\": \"/kaggle/input/babatecodemixedtext/English_Hausa_&_Codemixed_Dataset/Hausa_English_Codemixed_Test_Dataset3.csv\"\n    }\n)\n\n# read answer space from file and split into an array by line /kaggle/input/codemixed-vqa/Code-mixed QA.csv\nwith open(\"/kaggle/input/processed-daquar-dataset/answer_space.txt\") as f:\n    answer_space = f.read().splitlines()\n\n# label each item in the dataset with their respective answers\ndataset = dataset.map(\n    lambda examples: {\n        'label': [\n            answer_space.index(ans.replace(\" \", \"\").split(\",\")[0])  # select the 1st answer if multiple answers are provided\n            for ans in examples['answer']\n        ]\n    },\n    batched=True\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:19.691113Z","iopub.execute_input":"2024-07-18T16:42:19.691708Z","iopub.status.idle":"2024-07-18T16:42:20.57484Z","shell.execute_reply.started":"2024-07-18T16:42:19.691674Z","shell.execute_reply":"2024-07-18T16:42:20.573916Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Downloading and preparing dataset csv/default to /root/.cache/huggingface/datasets/csv/default-6ea0a3ad2fe480d0/0.0.0/433e0ccc46f9880962cc2b12065189766fbb2bee57a221866138fb9203c83519...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Downloading data files:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1c88e45d9a9d4d7d933729c50b970eb1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Extracting data files:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ae9e8ae4ecad4de9b29beb2e382aeebc"}},"metadata":{}},{"name":"stdout","text":"Dataset csv downloaded and prepared to /root/.cache/huggingface/datasets/csv/default-6ea0a3ad2fe480d0/0.0.0/433e0ccc46f9880962cc2b12065189766fbb2bee57a221866138fb9203c83519. Subsequent calls will reuse this data.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e1b80d261e544b9eae3fdb24976184ec"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/1 [00:00<?, ?ba/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a10ed66f72704b9da0807e92e7c8ed3a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/1 [00:00<?, ?ba/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d7ac6c353bfe48d2af41e109e603a14e"}},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n\n# Define file paths\ntrain_csv_path = \"/kaggle/input/babatecodemixedtext/English_Hausa_&_Codemixed_Dataset/Hausa_English_Codemixed_Train_Dataset3.csv\"\ntest_csv_path = \"/kaggle/input/babatecodemixedtext/English_Hausa_&_Codemixed_Dataset/Hausa_English_Codemixed_Test_Dataset3.csv\"\n\n# Load CSV files into data frames\ntrain_df = pd.read_csv(train_csv_path)\ntest_df = pd.read_csv(test_csv_path)\n\n# Now you have `train_df` and `test_df` containing your data!\n# You can perform further data manipulation and analysis using pandas.\n\n# Example: Display the first few rows of the training data\nprint(train_df.head())\n# Combine all splits for comprehensive EDA\ndf = pd.concat([train_df, test_df])","metadata":{"execution":{"iopub.status.busy":"2024-07-18T17:08:38.091359Z","iopub.execute_input":"2024-07-18T17:08:38.091748Z","iopub.status.idle":"2024-07-18T17:08:38.11876Z","shell.execute_reply.started":"2024-07-18T17:08:38.091712Z","shell.execute_reply":"2024-07-18T17:08:38.117851Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"                          englishquestion                 hausaquestion  \\\n0  what is the green object on the floor?      menene koren abu a kasa?   \n1  what is at the left of the candelabra?  menene a hagu na candelabra?   \n2                  what is on the drawer?    menene akan aljihun tebur?   \n3                what is to right of bed?           menene hakkin gado?   \n4         what is behind the tissue roll?     me ke bayan nadin tissue?   \n\n                                    question            answer   image_id  \n0        What is the koren abu on the floor?            basket   image519  \n1         What is that  ta hagun Candelabra?            window  image1324  \n2               What is akan aljihun drawer?             towel   image573  \n3         me nene to the right of the gadon?            window   image515  \n4  What is that abin dake bayan tissue roll?  bottle_of_liquid   image820  \n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"\n# Load the dataset\ndataset = full_data\n\n# Convert DatasetDict to pandas DataFrame\ndf_train = pd.DataFrame(dataset['train'])\ndf_validation = pd.DataFrame(dataset['validation'])\ndf_test = pd.DataFrame(dataset['test'])\n\n# Combine all splits for comprehensive EDA\ndf = pd.concat([df_train, df_validation, df_test])\"\"\"\n\n# Display basic information about the DataFrame\nprint(df.info())\nprint(df.describe())\n\n# Display first few rows of the DataFrame\nprint(df.head())\n\n# Check for missing values\nprint(df.isnull().sum())\n\n# Distribution of text lengths\ndf['text_length'] = df['question'].apply(len)\nsns.histplot(df['text_length'], bins=50, kde=True)\nplt.title('Distribution of Question Lengths')\nplt.xlabel('Length of Question Text')\nplt.ylabel('Frequency')\nplt.show()\n\n# Distribution of summary lengths\ndf['summary_length'] = df['answer'].apply(len)\nsns.histplot(df['summary_length'], bins=50, kde=True)\nplt.title('Distribution of Answer Lengths')\nplt.xlabel('Length of Answers')\nplt.ylabel('Frequency')\nplt.show()\n\n# Most frequent words in the text\nvectorizer = CountVectorizer(stop_words='english')\nX = vectorizer.fit_transform(df['question'])\nword_counts = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\nword_counts_sum = word_counts.sum().sort_values(ascending=False)\nprint(\"Most frequent words in the Questions:\")\nprint(word_counts_sum.head(20))\n\n# Most frequent words in the summary\nX_summary = vectorizer.fit_transform(df['answer'])\nword_counts_summary = pd.DataFrame(X_summary.toarray(), columns=vectorizer.get_feature_names_out())\nword_counts_summary_sum = word_counts_summary.sum().sort_values(ascending=False)\nprint(\"Most frequent words in the Answer:\")\nprint(word_counts_summary_sum.head(20))\n\n# Visualize the most frequent words in the text\nsns.barplot(x=word_counts_sum.head(20).values, y=word_counts_sum.head(20).index)\nplt.title('Most Frequent Words in the Text')\nplt.xlabel('Frequency')\nplt.ylabel('Words')\nplt.show()\n\n# Visualize the most frequent words in the summary\nsns.barplot(x=word_counts_summary_sum.head(20).values, y=word_counts_summary_sum.head(20).index)\nplt.title('Most Frequent Words in the Answers')\nplt.xlabel('Frequency')\nplt.ylabel('Words')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T17:13:25.630151Z","iopub.execute_input":"2024-07-18T17:13:25.630935Z","iopub.status.idle":"2024-07-18T17:13:27.294076Z","shell.execute_reply.started":"2024-07-18T17:13:25.630899Z","shell.execute_reply":"2024-07-18T17:13:27.293143Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1500 entries, 0 to 499\nData columns (total 7 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   englishquestion  1500 non-null   object\n 1   hausaquestion    1500 non-null   object\n 2   question         1500 non-null   object\n 3   answer           1500 non-null   object\n 4   image_id         1500 non-null   object\n 5   text_length      1500 non-null   int64 \n 6   summary_length   1500 non-null   int64 \ndtypes: int64(2), object(5)\nmemory usage: 93.8+ KB\nNone\n       text_length  summary_length\ncount  1500.000000     1500.000000\nmean     33.674000        7.109333\nstd      11.090193        5.897166\nmin      14.000000        1.000000\n25%      25.000000        4.000000\n50%      31.000000        5.000000\n75%      39.000000        9.000000\nmax      95.000000       52.000000\n                          englishquestion                 hausaquestion  \\\n0  what is the green object on the floor?      menene koren abu a kasa?   \n1  what is at the left of the candelabra?  menene a hagu na candelabra?   \n2                  what is on the drawer?    menene akan aljihun tebur?   \n3                what is to right of bed?           menene hakkin gado?   \n4         what is behind the tissue roll?     me ke bayan nadin tissue?   \n\n                                    question            answer   image_id  \\\n0        What is the koren abu on the floor?            basket   image519   \n1         What is that  ta hagun Candelabra?            window  image1324   \n2               What is akan aljihun drawer?             towel   image573   \n3         me nene to the right of the gadon?            window   image515   \n4  What is that abin dake bayan tissue roll?  bottle_of_liquid   image820   \n\n   text_length  summary_length  \n0           35               6  \n1           34               6  \n2           28               5  \n3           34               6  \n4           41              16  \nenglishquestion    0\nhausaquestion      0\nquestion           0\nanswer             0\nimage_id           0\ntext_length        0\nsummary_length     0\ndtype: int64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Most frequent words in the Questions:\nda        225\nnene      222\nke        168\nobject    146\ngefen     130\ntable     107\nwall      103\nakan      103\nright      90\nwurin      83\nna         83\nabu        83\nleft       83\nkan        81\nhagu       79\nkusa       78\nmenene     75\ndama       69\ngaban      69\nbayan      66\ndtype: int64\nMost frequent words in the Answer:\ntable         55\nchair         44\npicture       42\nbooks         39\npillow        39\nwhite         38\nwindow        35\nphoto         34\nlamp          31\nsofa          30\ncabinet       29\nbed           27\nblue          24\nbrown         24\nclothes       23\nmirror        23\ntelevision    23\nred           22\ndoor          22\nbag           20\ndtype: int64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Let's view some data","metadata":{}},{"cell_type":"code","source":"import IPython.display as display\n\ndef show_example(train=True, idx=None):\n    dataset_type = \"train\" if train else \"test\"\n    data = dataset[dataset_type]\n\n    if idx is None:\n        idx = np.random.randint(len(data))\n\n    image_path =  \"/kaggle/input/processed-daquar-dataset/images/\"+ f\"{data[idx]['image_id']}.png\"\n    image = Image.open(image_path)\n    display.display(image)\n\n    question = data[idx][\"question\"]\n    #Equestion = data[idx][\"englishquestion\"]\n   # Hquestion = data[idx][\"hausaquestion\"]\n    \n    answer = data[idx][\"answer\"]\n    label = data[idx][\"label\"]\n\n    print(f\"CODE-MIXED Question:\\t {question}\")\n   # print(f\"HAUSA Question:\\t {Hquestion}\")\n   # print(f\"ENGLISH Question:\\t {Equestion}\")\n    print(f\"Answer:\\t\\t {answer} (Label: {label})\")\n\n    return answer\nshow_example()","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.587693Z","iopub.status.idle":"2024-07-18T16:42:20.588211Z","shell.execute_reply.started":"2024-07-18T16:42:20.588023Z","shell.execute_reply":"2024-07-18T16:42:20.588044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Generate a Multimodal Collator for the Dataset\n\nThis collator is designed to be utilized within the Trainer() to seamlessly construct the Dataloader from the dataset, streamlining the input pipeline to the model.\n\nThe collator's primary function is to handle both textual (question) and image data. It processes the question text, tokenizing it and generating attention masks. Simultaneously, it featurizes the image, essentially encapsulating its pixel values. These processed inputs are then fed into our multimodal transformer model, facilitating the question-answering process.","metadata":{}},{"cell_type":"code","source":"@dataclass\nclass MultimodalCollator:\n    tokenizer: AutoTokenizer\n    preprocessor: AutoFeatureExtractor\n    \n    def tokenize_text(self, texts: List[str]) -> Dict[str, torch.Tensor]:\n        \"\"\"\n        Tokenize text inputs and return relevant tokenized information.\n        \"\"\"\n        encoded_text = self.tokenizer(\n            text=texts,\n            padding='longest',\n            max_length=24,\n            truncation=True,\n            return_tensors='pt',\n            return_token_type_ids=True,\n            return_attention_mask=True,\n        )\n        return {\n            \"input_ids\": encoded_text['input_ids'].squeeze(),\n            \"token_type_ids\": encoded_text['token_type_ids'].squeeze(),\n            \"attention_mask\": encoded_text['attention_mask'].squeeze(),\n        }\n    \n    def preprocess_images(self, images: List[str]) -> Dict[str, torch.Tensor]:\n        \"\"\"\n        Extract features from images and return the processed pixel values.\n        \"\"\"\n        processed_images = self.preprocessor(\n            images=[\n                Image.open(os.path.join(\"/kaggle/input/processed-daquar-dataset/images/\", f\"{image_id}.png\")).convert('RGB')\n                for image_id in images\n            ],\n            return_tensors=\"pt\",\n        )\n        return {\n            \"pixel_values\": processed_images['pixel_values'].squeeze(),\n        }\n            \n    def __call__(self, raw_batch_dict) -> Dict[str, torch.Tensor]:\n        \"\"\"\n        Process raw batch data, tokenize text and extract image features, returning a dictionary\n        containing processed inputs and labels.\n        \"\"\"\n        question_batch = raw_batch_dict['question'] if isinstance(raw_batch_dict, dict) else [i['question'] for i in raw_batch_dict]\n        image_id_batch = raw_batch_dict['image_id'] if isinstance(raw_batch_dict, dict) else [i['image_id'] for i in raw_batch_dict]\n        label_batch = raw_batch_dict['label'] if isinstance(raw_batch_dict, dict) else [i['label'] for i in raw_batch_dict]\n\n        return {\n            **self.tokenize_text(question_batch),\n            **self.preprocess_images(image_id_batch),\n            'labels': torch.tensor(label_batch, dtype=torch.int64),\n        }\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.589377Z","iopub.status.idle":"2024-07-18T16:42:20.589789Z","shell.execute_reply.started":"2024-07-18T16:42:20.589559Z","shell.execute_reply":"2024-07-18T16:42:20.589582Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# feature_extractor = AutoFeatureExtractor.from_pretrained('facebook/deit-base-patch16-224')\n# model = ViTForImageClassification.from_pretrained('facebook/deit-base-patch16-224')\n# inputs = feature_extractor(images=image, return_tensors=\"pt\")\n# outputs = model(**inputs)\n# logits = outputs.logits\n# # model predicts one of the 1000 ImageNet classes\n# predicted_class_idx = logits.argmax(-1).item()\n# print(\"Predicted class:\", model.config.id2label[predicted_class_idx])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.591154Z","iopub.status.idle":"2024-07-18T16:42:20.591567Z","shell.execute_reply.started":"2024-07-18T16:42:20.591343Z","shell.execute_reply":"2024-07-18T16:42:20.591359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Defining the Multimodal VQA Model Architecture\n\nMultimodal models can be of various forms to capture information from the text & image modalities, along with some cross-modal interaction as well. Here, we explore \"Fusion\" Models, that fuse information from the text encoder & image encoder to perform the downstream task (visual question answering).\n\nThe text encoder can be a text-based transformer model (like BERT, RoBERTa, etc.) while the image encoder could be an image transformer (like ViT, Deit, BeIT, etc.). After passing the tokenized question through the text-based transformer & the image features through the image transformer, the outputs are concatenated & passed through a fully-connected network with an output having the same dimensions as the answer-space.\n\nSince we model the VQA task as a multi-class classification, it is natural to use the Cross-Entropy Loss as the loss function.","metadata":{}},{"cell_type":"code","source":"class MultimodalVQAModel(nn.Module):\n    def __init__(\n        self,\n        num_labels: int = len(answer_space),\n        intermediate_dim: int = 512,\n        #pretrained_text_name: str = 'bert-base-uncased',\n        pretrained_text_name: str = 'Davlan/bert-base-multilingual-cased-finetuned-hausa',\n        #pretrained_text_name: str = 'bert-base-multilingual-cased',\n        #pretrained_image_name: str = 'google/vit-base-patch16-224-in21k'\n        pretrained_image_name : str = 'facebook/deit-base-patch16-224'\n    ):\n        \"\"\"\n        Initializes the Multimodal VQA Model.\n\n        Args:\n            num_labels (int): Number of labels in the answer space.\n            intermediate_dim (int): Dimensionality of the intermediate layer in the fusion module.\n            pretrained_text_name (str): Pretrained name for the text encoder.\n            pretrained_image_name (str): Pretrained name for the image encoder.\n        \"\"\"\n        super(MultimodalVQAModel, self).__init__()\n        self.num_labels = num_labels\n        self.pretrained_text_name = pretrained_text_name\n        self.pretrained_image_name = pretrained_image_name\n        \n        # Text and image encoders\n        \n        self.text_encoder = AutoModel.from_pretrained(self.pretrained_text_name)\n        self.image_encoder = AutoModel.from_pretrained(self.pretrained_image_name)\n        \n        # Fusion module\n        self.fusion = nn.Sequential(\n            nn.Linear(self.text_encoder.config.hidden_size + self.image_encoder.config.hidden_size, intermediate_dim),\n            nn.ReLU(),\n            nn.Dropout(0.5),\n        )\n        \n        # Classifier\n        self.classifier = nn.Linear(intermediate_dim, self.num_labels)\n        \n        # Loss function\n        self.criterion = nn.CrossEntropyLoss()\n\n    def forward(\n        self,\n        input_ids: torch.LongTensor,\n        pixel_values: torch.FloatTensor,\n        attention_mask: Optional[torch.LongTensor] = None,\n        token_type_ids: Optional[torch.LongTensor] = None,\n        labels: Optional[torch.LongTensor] = None\n    ):\n        \"\"\"\n        Forward pass of the model.\n\n        Args:\n            input_ids (torch.LongTensor): Tokenized input IDs for text.\n            pixel_values (torch.FloatTensor): Pixel values for images.\n            attention_mask (Optional[torch.LongTensor]): Attention mask for text.\n            token_type_ids (Optional[torch.LongTensor]): Token type IDs for text.\n            labels (Optional[torch.LongTensor]): Ground truth labels.\n\n        Returns:\n            Dict: Dictionary containing model outputs, including logits. If labels are provided, also includes loss.\n        \"\"\"\n        # Encode text with masking\n        encoded_text = self.text_encoder(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            return_dict=True,\n        )\n        \n        # Encode images\n        encoded_image = self.image_encoder(\n            pixel_values=pixel_values,\n            return_dict=True,\n        )\n        \n        # Combine encoded texts and images\n        fused_output = self.fusion(\n            torch.cat(\n                [\n                    encoded_text['pooler_output'],\n                    encoded_image['pooler_output'],\n                ],\n                dim=1\n            )\n        )\n        \n        # Make predictions\n        logits = self.classifier(fused_output)\n        \n        out = {\"logits\": logits}\n        if labels is not None:\n            loss = self.criterion(logits, labels)\n            out[\"loss\"] = loss\n        \n        return out\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.593404Z","iopub.status.idle":"2024-07-18T16:42:20.593729Z","shell.execute_reply.started":"2024-07-18T16:42:20.593571Z","shell.execute_reply":"2024-07-18T16:42:20.593586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def create_multimodal_vqa_collator_and_model(text_encoder='Davlan/bert-base-multilingual-cased-finetuned-hausa', image_encoder='facebook/deit-base-patch16-224'):\n#def create_multimodal_vqa_collator_and_model(text_encoder='bert-base-uncased', image_encoder='google/vit-base-patch16-224-in21k'):\n#def create_multimodal_vqa_collator_and_model(text_encoder='bert-base-multilingual-cased', image_encoder='google/vit-base-patch16-224-in21k'):\n    \"\"\"\n    Creates a Multimodal VQA collator and model.\n\n    Args:\n        text_encoder (str): Pretrained name for the text encoder.\n        image_encoder (str): Pretrained name for the image encoder.\n\n    Returns:\n        Tuple: Multimodal collator and VQA model.\n    \"\"\"\n    # Initialize tokenizer and feature extractor\n    tokenizer = AutoTokenizer.from_pretrained(text_encoder)\n    preprocessor = AutoFeatureExtractor.from_pretrained(image_encoder)\n    \n    # Create Multimodal Collator\n    multimodal_collator = MultimodalCollator(\n        tokenizer=tokenizer,\n        preprocessor=preprocessor,\n    )\n\n    # Create Multimodal VQA Model\n    multimodal_model = MultimodalVQAModel(\n        pretrained_text_name=text_encoder,\n        pretrained_image_name=image_encoder\n    ).to(device)\n\n    return multimodal_collator, multimodal_model\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.594935Z","iopub.status.idle":"2024-07-18T16:42:20.5953Z","shell.execute_reply.started":"2024-07-18T16:42:20.595108Z","shell.execute_reply":"2024-07-18T16:42:20.595124Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def wup_measure(a, b, similarity_threshold=0.925):\n    \"\"\"\n    Computes the Wu-Palmer similarity score between two words or phrases.\n\n    Args:\n        a (str): First word or phrase.\n        b (str): Second word or phrase.\n        similarity_threshold (float): Threshold for similarity to consider semantic fields.\n\n    Returns:\n        float: Wu-Palmer similarity score.\n    \"\"\"\n    def get_semantic_field(word):\n        \"\"\"\n        Retrieves the semantic field for a word.\n\n        Args:\n            word (str): Word to retrieve the semantic field for.\n\n        Returns:\n            Tuple: Tuple containing the semantic field and weight.\n        \"\"\"\n        weight = 1.0\n        semantic_field = wordnet.synsets(word, pos=wordnet.NOUN)\n        return semantic_field, weight\n\n    def get_stem_word(word):\n        \"\"\"\n        Processes words in the form 'word\\d+:wordid' by returning the word and downweighting.\n\n        Args:\n            word (str): Word to process.\n\n        Returns:\n            Tuple: Tuple containing the processed word and weight.\n        \"\"\"\n        weight = 1.0\n        return word, weight\n\n    global_weight = 1.0\n\n    # Get stem words and weights\n    a, global_weight_a = get_stem_word(a)\n    b, global_weight_b = get_stem_word(b)\n    global_weight = min(global_weight_a, global_weight_b)\n\n    # Check if words are the same\n    if a == b:\n        return 1.0 * global_weight\n\n    # Check for empty strings\n    if a == \"\" or b == \"\":\n        return 0\n\n    # Get semantic fields and weights\n    interp_a, weight_a = get_semantic_field(a)\n    interp_b, weight_b = get_semantic_field(b)\n\n    # Check for empty semantic fields\n    if interp_a == [] or interp_b == []:\n        return 0\n\n    # Find the most optimistic interpretation\n    global_max = 0.0\n    for x in interp_a:\n        for y in interp_b:\n            local_score = x.wup_similarity(y)\n            if local_score > global_max:\n                global_max = local_score\n\n    # Use semantic fields and downweight unless the score is high (indicating synonyms)\n    if global_max < similarity_threshold:\n        interp_weight = 0.1\n    else:\n        interp_weight = 1.0\n\n    final_score = global_max * weight_a * weight_b * interp_weight * global_weight\n    return final_score\n\ndef batch_wup_measure(labels, preds):\n    \"\"\"\n    Computes the average Wu-Palmer similarity score for a batch of predicted and ground truth labels.\n\n    Args:\n        labels (List): List of ground truth labels.\n        preds (List): List of predicted labels.\n\n    Returns:\n        float: Average Wu-Palmer similarity score for the batch.\n    \"\"\"\n    wup_scores = [wup_measure(answer_space[label], answer_space[pred]) for label, pred in zip(labels, preds)]\n    return np.mean(wup_scores)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.596508Z","iopub.status.idle":"2024-07-18T16:42:20.596823Z","shell.execute_reply.started":"2024-07-18T16:42:20.596664Z","shell.execute_reply":"2024-07-18T16:42:20.596678Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Performance Metrics in Visual Question Answering: Wu & Palmer Similarity\n\nThe Wu & Palmer similarity is a metric designed to measure the semantic similarity between two words or phrases. It does so by considering the positions of the concepts (c1 and c2) in a taxonomy and their relative location to their Least Common Subsumer (LCS(c1, c2)).\n\nIn the context of a directed acyclic graph, the Least Common Subsumer is the deepest node that has both considered nodes as descendants. Importantly, each node is considered a descendant of itself.\n\nWu & Palmer similarity proves effective for single-word answers (the primary focus in our task), but it may not be suitable for phrases or sentences due to its design.\n\nThe Natural Language Toolkit (nltk) provides an implementation of the Wu & Palmer similarity score based on the WordNet taxonomy. This implementation to align with the definition of Wu & Palmer similarity as specified in the DAQUAR dataset.","metadata":{}},{"cell_type":"code","source":"labels = np.random.randint(len(answer_space), size=5)\npreds = np.random.randint(len(answer_space), size=5)\n\ndef showAnswers(ids):\n    print([answer_space[id] for id in ids])\n\nshowAnswers(labels)\nshowAnswers(preds)\n\nprint(\"Predictions vs Labels: \", batch_wup_measure(labels, preds))\nprint(\"Labels vs Labels: \", batch_wup_measure(labels, labels))","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.597804Z","iopub.status.idle":"2024-07-18T16:42:20.598133Z","shell.execute_reply.started":"2024-07-18T16:42:20.597968Z","shell.execute_reply":"2024-07-18T16:42:20.597984Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def compute_metrics(eval_tuple: Tuple[np.ndarray, np.ndarray]) -> Dict[str, float]:\n    \"\"\"\n    Computes evaluation metrics for a given set of logits and labels.\n\n    Args:\n        eval_tuple (Tuple): Tuple containing logits and corresponding ground truth labels.\n\n    Returns:\n        Dict: Dictionary of computed metrics, including WUP similarity, accuracy, and F1 score.\n    \"\"\"\n    logits, labels = eval_tuple\n\n    # Calculate predictions\n    preds = logits.argmax(axis=-1)\n\n    # Compute metrics\n    metrics = {\n        \"wups\": batch_wup_measure(labels, preds),\n        \"acc\": accuracy_score(labels, preds),\n        \"f1\": f1_score(labels, preds, average='macro')\n    }\n\n    return metrics\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.59985Z","iopub.status.idle":"2024-07-18T16:42:20.600185Z","shell.execute_reply.started":"2024-07-18T16:42:20.60002Z","shell.execute_reply":"2024-07-18T16:42:20.600036Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Train the model and evaluate","metadata":{}},{"cell_type":"code","source":"# Define training arguments for the model\n\nargs = TrainingArguments(\n    output_dir=\"/kaggle/working/checkpoint/\",            # Output directory for checkpoints and logs=\n    seed=12,                         # Seed for reproducibility\n    evaluation_strategy=\"steps\",        # Evaluation strategy: \"steps\" or \"epoch\"\n    eval_steps=10,                     # Evaluate every 100 steps\n    logging_strategy=\"steps\",           # Logging strategy: \"steps\" or \"epoch\"\n    logging_steps=10,                  # Log every 100 steps\n    save_strategy=\"steps\",              # Saving strategy: \"steps\" or \"epoch\"\n    save_steps=10,                     # Save every 100 steps\n    save_total_limit=3,                 # Save only the last 3 checkpoints at any given time during training \n    metric_for_best_model='wups',       # Metric used for determining the best model\n    per_device_train_batch_size=8,     # Batch size per GPU for training\n    per_device_eval_batch_size=8,      # Batch size per GPU for evaluation\n    remove_unused_columns=False,        # Whether to remove unused columns in the dataset\n    num_train_epochs=5,                 # Number of training epochs\n    fp16=True,                          # Enable mixed precision training (float16)\n    dataloader_num_workers=8,           # Number of workers for data loading\n    load_best_model_at_end=True,        # Whether to load the best model at the end of training\n)\n    \n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.602567Z","iopub.status.idle":"2024-07-18T16:42:20.602923Z","shell.execute_reply.started":"2024-07-18T16:42:20.602754Z","shell.execute_reply":"2024-07-18T16:42:20.60277Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import wandb\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\n#wandb_key = user_secrets.get_secret(\"wandb2\")\nos.environ[\"WANDB_API_KEY\"] = '90f24651cde656e5a0c76b5aca16c705cc4a77c6'\n#wandb.login(key = wandb_key)\n!wandb status","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.603982Z","iopub.status.idle":"2024-07-18T16:42:20.604354Z","shell.execute_reply.started":"2024-07-18T16:42:20.604166Z","shell.execute_reply":"2024-07-18T16:42:20.60418Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def create_and_train_model(dataset, args, text_model='bert-base-uncased', image_model='google/vit-base-patch16-224-in21k', multimodal_model='bert_vit'):\n#def create_and_train_model(dataset, args, text_model='bert-base-multilingual-cased', image_model='google/vit-base-patch16-224-in21k', multimodal_model='bert_vit'):\n\n    \"\"\"\n    Creates a Multimodal VQA collator and model, and trains the model using the provided dataset and training arguments.\n\n    Args:\n        dataset (Dict): Dictionary containing 'train' and 'test' datasets.\n        args (TrainingArguments): Training arguments for the model.\n        text_model (str): Pretrained name for the text encoder.\n        image_model (str): Pretrained name for the image encoder.\n        multimodal_model (str): Name for the multimodal model.\n\n    Returns:\n        Tuple: Collator, model, training metrics, and evaluation metrics.\n    \"\"\"\n    # Create Multimodal Collator and Model\n    collator, model = create_multimodal_vqa_collator_and_model(text_model, image_model)\n    \n    # Create a copy of arguments and set the output directory\n    multi_args = deepcopy(args)\n    multi_args.output_dir = os.path.join(\"/kaggle/working/checkpoint/\", multimodal_model)\n    print(multi_args.output_dir)\n    # Create Trainer for Multimodal Model\n    multi_trainer = Trainer(\n        model,\n        multi_args,\n        train_dataset=dataset['train'],\n        eval_dataset=dataset['test'],\n        data_collator=collator,\n        compute_metrics=compute_metrics\n    )\n    \n    # Train and evaluate for metrics\n    train_multi_metrics = multi_trainer.train()\n    eval_multi_metrics = multi_trainer.evaluate()\n    \n    return collator, model, train_multi_metrics, eval_multi_metrics, multi_trainer\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.606114Z","iopub.status.idle":"2024-07-18T16:42:20.606498Z","shell.execute_reply.started":"2024-07-18T16:42:20.606308Z","shell.execute_reply":"2024-07-18T16:42:20.606325Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"collator, model, train_multi_metrics, eval_multi_metrics, trainer = create_and_train_model(dataset, args)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.607759Z","iopub.status.idle":"2024-07-18T16:42:20.608076Z","shell.execute_reply.started":"2024-07-18T16:42:20.607919Z","shell.execute_reply":"2024-07-18T16:42:20.607933Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"eval_multi_metrics","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.609195Z","iopub.status.idle":"2024-07-18T16:42:20.609555Z","shell.execute_reply.started":"2024-07-18T16:42:20.609383Z","shell.execute_reply":"2024-07-18T16:42:20.609399Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"checkpoint_folder = \"/kaggle/working/checkpoint/bert_vit/\"\n\n\n# Get a list of all subdirectories in the checkpoint folder\nall_subdirectories = [d for d in os.listdir(checkpoint_folder) if os.path.isdir(os.path.join(checkpoint_folder, d))]\n\n# Filter only subdirectories starting with \"checkpoint-\"\ncheckpoint_subdirectories = [d for d in all_subdirectories if d.startswith(\"checkpoint-\")]\n\n# Extract the checkpoint numbers from the subdirectory names\ncheckpoint_numbers = [int(d.split(\"-\")[1]) for d in checkpoint_subdirectories]\n\n# Find the latest checkpoint number\nlatest_checkpoint_number = max(checkpoint_numbers, default=0)\n\n# Construct the path for the latest checkpoint\nlatest_checkpoint_path = os.path.join(checkpoint_folder, f\"checkpoint-{latest_checkpoint_number}/pytorch_model.bin\")\n\nprint(\"Latest Checkpoint Number:\", latest_checkpoint_number)\nprint(\"Latest Checkpoint Path:\", latest_checkpoint_path)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.610662Z","iopub.status.idle":"2024-07-18T16:42:20.610973Z","shell.execute_reply.started":"2024-07-18T16:42:20.610817Z","shell.execute_reply":"2024-07-18T16:42:20.610832Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = MultimodalVQAModel()\nmodel.load_state_dict(torch.load(latest_checkpoint_path))\nmodel.to(device) \n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.613475Z","iopub.status.idle":"2024-07-18T16:42:20.613827Z","shell.execute_reply.started":"2024-07-18T16:42:20.613654Z","shell.execute_reply":"2024-07-18T16:42:20.61367Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import random\n\n# Randomly sample 10 indices from the test dataset\nrandom_sample_indices = random.sample(range(len(dataset[\"test\"])), k=10)\n\n# Sample data for manual testing\nsample = collator([dataset[\"test\"][index] for index in random_sample_indices])\n\n# Extract input components from the sample for manual testing\ninput_ids = sample[\"input_ids\"].to(device)\ntoken_type_ids = sample[\"token_type_ids\"].to(device)\nattention_mask = sample[\"attention_mask\"].to(device)\npixel_values = sample[\"pixel_values\"].to(device)\nlabels = sample[\"labels\"].to(device)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.615109Z","iopub.status.idle":"2024-07-18T16:42:20.615489Z","shell.execute_reply.started":"2024-07-18T16:42:20.615314Z","shell.execute_reply":"2024-07-18T16:42:20.615334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Set the model to evaluation mode\nmodel.eval()\n\n# Forward pass with the sample data\noutput = model(input_ids, pixel_values, attention_mask, token_type_ids, labels)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.616901Z","iopub.status.idle":"2024-07-18T16:42:20.61742Z","shell.execute_reply.started":"2024-07-18T16:42:20.617198Z","shell.execute_reply":"2024-07-18T16:42:20.617219Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get predictions from the model output\npredictions = output[\"logits\"].argmax(axis=-1).cpu().numpy()\npredictions\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.618829Z","iopub.status.idle":"2024-07-18T16:42:20.619164Z","shell.execute_reply.started":"2024-07-18T16:42:20.618999Z","shell.execute_reply":"2024-07-18T16:42:20.619015Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from nltk.corpus import wordnet\n\ndef similarity(a, b):\n    # Split words if it is a list and remove extra spaces\n    words_a = [w.strip() for w in a.split(',')]\n    words_b = [w.strip() for w in b.split(',')]\n\n    # Split words if connected by underscore _\n    a = [w_ for word in words_a for w_ in word.split('_')]\n    b = [w_ for word in words_b for w_ in word.split('_')]\n\n    res = 0\n    n = 0\n\n    # Calculate score and take average\n    for i in a:\n        synsets_i = wordnet.synsets(i)\n        if synsets_i:\n            s1 = synsets_i[0]\n            for j in b:\n                synsets_j = wordnet.synsets(j)\n                if synsets_j:\n                    s2 = synsets_j[0]\n                    sim = s1.wup_similarity(s2)\n                    if sim:\n                        res += sim\n                    n += 1\n\n    return res / n if n != 0 else 0\n\n# Show predictions for a range of examples\nfor i in range(20, min(70, len(preds) + 20)):\n    print(\"\\n=========================================================\\n\")\n    real_answer = show_example(train=False, idx=i)\n    predicted_answer = answer_space[preds[i - 20]]\n    print(\"Predicted Answer:\\t\", predicted_answer)\n    print(f\"Similarity: {similarity(real_answer, predicted_answer)}\")\n    print(\"\\n=========================================================\\n\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.619943Z","iopub.status.idle":"2024-07-18T16:42:20.620247Z","shell.execute_reply.started":"2024-07-18T16:42:20.620093Z","shell.execute_reply":"2024-07-18T16:42:20.620107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def count_trainable_parameters(model):\n    \"\"\"\n    Count and print the number of trainable parameters in a PyTorch model.\n\n    Args:\n        model (torch.nn.Module): The PyTorch model.\n\n    Returns:\n        None\n    \"\"\"\n    num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    print(\"Number of trainable parameters: {:,}\".format(num_params))\ncount_trainable_parameters(model)","metadata":{"execution":{"iopub.status.busy":"2024-07-18T16:42:20.621665Z","iopub.status.idle":"2024-07-18T16:42:20.62201Z","shell.execute_reply.started":"2024-07-18T16:42:20.621843Z","shell.execute_reply":"2024-07-18T16:42:20.621859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}